<?xml version="1.0" encoding="utf-8"?>
<!---Shows images for a matching search term in a slideshow component. -->
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:components="wcmc.components.*"
		xmlns:classes="wcmc.classes.*" height="183" rollOver="bordercontainer1_rollOverHandler(event)" rollOut="bordercontainer1_rollOutHandler(event)" currentState="images">
	<s:states>
		<s:State name="noImages"/>
		<s:State name="images"/>
	</s:states>
	<fx:Declarations>
		<classes:FlickrProvider id="flickrProvider" flickrSearchCompleted="flickrProvider_flickrSearchCompletedHandler(event)"/>
		<s:Fade id="fadeIn" alphaFrom="0" alphaTo="0.8" duration="300"/>
		<s:Fade id="fadeOut" alphaFrom="0.8" alphaTo="0" duration="300"/>
	</fx:Declarations>
	<mx:SWFLoader source="{EmbeddedImages.loader}" verticalCenter="0" horizontalCenter="0" includeIn="images"/>
	<s:Label text="{resourceManager.getString('myResources', 'TEXT52')}" includeIn="noImages" horizontalCenter="0" verticalCenter="0"/>
	<components:MyList id="list" dataProvider="{getItems()}" itemRenderer="wcmc.renderers.flickrRenderer" skinClass="wcmc.skins.FlickrListSkin" rollOverColor="0xffffff" selectionColor="0xffffff" contentBackgroundAlpha="0" includeIn="images">
		<components:layout>
			<s:TileLayout id="flickrListLayout" columnWidth="{IMAGEWIDTH}" clipAndEnableScrolling="true" requestedColumnCount="{flickrProvider.photos.length}" horizontalGap="0"/>
		</components:layout>
	</components:MyList>
	<mx:Image id="prev" source="{EmbeddedImages.prev}" click="movePrevious()" left="0" top="70" showEffect="{fadeIn}" hideEffect="{fadeOut}" visible="{getPrevVisible()}" toolTip="{resourceManager.getString('myResources', 'TEXT53')}" includeIn="images"/>
	<mx:Image id="next" source="{EmbeddedImages.next}" click="moveNext()" right="0" top="70" showEffect="{fadeIn}" hideEffect="{fadeOut}" visible="{getNextVisible()}" toolTip="{resourceManager.getString('myResources', 'TEXT54')}" includeIn="images"/>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import wcmc.classes.EmbeddedImages;
			import wcmc.classes.FlickrSearchCompleted;
			[Bindable]private var _position:Number=0;
			private var _searchTerm:String;
			private const IMAGEWIDTH:Number=240;
			private var mouseOverList:Boolean=false;
			public function get position():Number
			{
				return _position;
			}
			public function set position(value:Number):void
			{
				_position = value;
				setVisibilities();
				dispatchEvent(new Event("loadImage"));
			}
			[Bindable]public function get searchTerm():String
			{
				return _searchTerm;
			}
			public function set searchTerm(value:String):void
			{
				_searchTerm = value;
				executeFlickrRequest();
			}
			protected function executeFlickrRequest():void
			{
				if (flickrProvider.photos)
				{
					flickrProvider.photos.removeAll();
					position=0;
				}
				currentState="images";
				flickrProvider.search(escape(_searchTerm));
			}
			protected function flickrProvider_flickrSearchCompletedHandler(event:FlickrSearchCompleted):void
			{
				if (event.photos.length==0) 
				{
					currentState="noImages";
					return;
				}
				dispatchEvent(new Event("loadImage"));
				setVisibilities();
			}
			protected function moveNext():void
			{
				flickrListLayout.horizontalScrollPosition+=IMAGEWIDTH;
				position+=1;
			}
			protected function movePrevious():void
			{
				flickrListLayout.horizontalScrollPosition-=IMAGEWIDTH;
				position-=1;
			}
			[Bindable (event="loadImage")]
			protected function getItems():ArrayCollection
			{
				return new ArrayCollection(flickrProvider.photos.source.slice(position,position+2));
			}
			[Bindable (event="setPrevVisibility")]
			protected function getPrevVisible():Boolean
			{
				if ((position!=0)&&(mouseOverList)){return true}else{return false}; 
			}
			[Bindable (event="setNextVisibility")]
			protected function getNextVisible():Boolean
			{
				if ((position<flickrProvider.photos.length-1)&&(mouseOverList)){return true}else{return false};
			}
			protected function bordercontainer1_rollOverHandler(event:MouseEvent):void
			{
				mouseOverList=true;
				setVisibilities();
			}
			protected function bordercontainer1_rollOutHandler(event:MouseEvent):void
			{
				mouseOverList=false;
				setVisibilities();
			}
			protected function setVisibilities():void
			{
				dispatchEvent(new Event("setPrevVisibility"));
				dispatchEvent(new Event("setNextVisibility"));
			}
		]]>
	</fx:Script>
</s:BorderContainer>
